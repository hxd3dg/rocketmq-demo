server.port=8080
spring.application.name=demo-cloud-rocket
#name-server
spring.cloud.stream.rocketmq.binder.name-server=192.168.0.11:9876;192.168.0.12:9876

#生产者,共用同一个topic,producergroup不同
#生产者1
spring.cloud.stream.bindings.output.destination=test-topic
#数据发送和接收方式 text/plain   application/json
spring.cloud.stream.bindings.output.content-type=text/plain
#生产者的group可以不要
#spring.cloud.stream.rocketmq.bindings.output.producer.group=demo-group
#用于数据编码
spring.cloud.stream.bindings.output.producer.use-native-encoding=true
#事务设置
spring.cloud.stream.rocketmq.bindings.output.producer.group=tx-bonded-group
spring.cloud.stream.rocketmq.bindings.output.producer.transactional=true

#生产者2
spring.cloud.stream.bindings.output1.destination=test-topic
spring.cloud.stream.bindings.output1.content-type=text/plain
spring.cloud.stream.rocketmq.bindings.output1.producer.group=demo-group1
#用于数据编码
spring.cloud.stream.bindings.output1.producer.use-native-encoding=true

#消费者,共用同一个topic,consumergroup不同,tag也不同
#消费者1
spring.cloud.stream.bindings.input1.destination=test-topic
spring.cloud.stream.bindings.input1.content-type=application/json
spring.cloud.stream.bindings.input1.group=comsumer-group1
spring.cloud.stream.bindings.input1.consumer.concurrency=5
#tag用于过滤消息
spring.cloud.stream.rocketmq.bindings.input1.consumer.tags=tag2

#消费者2
spring.cloud.stream.bindings.input2.destination=test-topic
spring.cloud.stream.bindings.input2.content-type=application/json
spring.cloud.stream.bindings.input2.group=comsumer-group2
spring.cloud.stream.bindings.input2.consumer.concurrency=5
spring.cloud.stream.rocketmq.bindings.input2.consumer.tags=tag1



#需要在rocketmq中手动新建topic和消费组

#配置重试队列和死信队列配置

#重试,属于消息接收得到但是消费失败
#重试机制,当消息消费失败时默认会最多试3次（加上第一次）,如果将该属性值定义为1，则表示不允许进行重试
spring.cloud.stream.bindings.input1.consumer.maxAttempts=5
#定制消费者线程数,即Spring Cloud Stream将同时启动5个线程用于从名为input1的Binding进行消费。
#spring.cloud.stream.bindings.input1.consumer.concurrency=5
# 重试时初始避退间隔，单位毫秒，默认1000
spring.cloud.stream.bindings.Input1.consumer.backOffInitialInterval=500
# 避退乘数，默认2.0
spring.cloud.stream.bindings.Input1.consumer.backOffMultiplier=3
# 重试时最大避退间隔，单位毫秒，默认10000
spring.cloud.stream.bindings.Input1.consumer.backOffMaxInterval=8000


#rocketmq特性配置
#通过tag接收消息,多个Tag之间通过双竖线分隔。
#spring.cloud.stream.rocketmq.bindings.input1.consumer.tags=tag0||tag1
#以广播方式接收消息
spring.cloud.stream.rocketmq.bindings.input1.consumer.broadcasting=true
#是否按顺序消费
spring.cloud.stream.rocketmq.bindings.input1.consumer.orderly=true


#死信,属于找不到消息接收方或重试一定次数一直消费不成功
#找不到消息接收方立即投递到死信队列
spring.cloud.stream.rocketmq.bindings.input1.consumer.delayLevelWhenNextConsumer=-1

#事实上，对于一直无法消费成功的消息，RocketMQ会在达到最大重试次数之后，将该消息投递至死信队列。然后我们需要关注死信队列，并对该死信消息业务做人工的补偿操作。