server.port=8080
spring.application.name=demo-cloud-rocket
#name-server
spring.cloud.stream.rocketmq.binder.name-server=192.168.0.11:9876;192.168.0.12:9876
#生产者,共用同一个topic,producergroup不同
#生产者1
spring.cloud.stream.bindings.output.destination=test-topic
#数据发送和接收方式 text/plain   application/json
spring.cloud.stream.bindings.output.content-type=text/plain
#生产者的group可以不要
#spring.cloud.stream.rocketmq.bindings.output.producer.group=demo-group
#用于数据编码
spring.cloud.stream.bindings.output.producer.use-native-encoding=true
#事务设置
spring.cloud.stream.rocketmq.bindings.output.producer.group=tx-bonded-group
spring.cloud.stream.rocketmq.bindings.output.producer.transactional=true

#生产者2
spring.cloud.stream.bindings.output1.destination=test-topic
spring.cloud.stream.bindings.output1.content-type=text/plain
spring.cloud.stream.rocketmq.bindings.output1.producer.group=demo-group1
#用于数据编码
spring.cloud.stream.bindings.output1.producer.use-native-encoding=true

#消费者,共用同一个topic,consumergroup不同,tag也不同
#消费者1
spring.cloud.stream.bindings.input1.destination=test-topic
spring.cloud.stream.bindings.input1.content-type=application/json
spring.cloud.stream.bindings.input1.group=comsumer-group1
spring.cloud.stream.bindings.input1.consumer.concurrency=5
#tag用于过滤消息
spring.cloud.stream.rocketmq.bindings.input1.consumer.tags=tag2

#消费者2
spring.cloud.stream.bindings.input2.destination=test-topic
spring.cloud.stream.bindings.input2.content-type=application/json
spring.cloud.stream.bindings.input2.group=comsumer-group2
spring.cloud.stream.bindings.input2.consumer.concurrency=5
spring.cloud.stream.rocketmq.bindings.input2.consumer.tags=tag1

#需要在rocketmq中手动新建topic和消费组